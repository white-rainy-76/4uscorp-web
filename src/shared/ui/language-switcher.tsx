'use client'

import { useState } from 'react'
import { useRouter, usePathname } from 'next/navigation'
import { Button } from '@/shared/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/shared/ui/dropdown-menu'
import { Globe } from 'lucide-react'
import { useDictionary } from '@/shared/lib/hooks'

const languages = [
  { code: 'en', name: 'English', flag: 'üá∫üá∏' },
  { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
]

export function LanguageSwitcher() {
  const { lang } = useDictionary()
  const router = useRouter()
  const pathname = usePathname()
  const [isOpen, setIsOpen] = useState(false)

  const currentLanguage = languages.find((l) => l.code === lang) || languages[0]

  const handleLanguageChange = (newLang: string) => {
    if (!pathname) return

    // –û–±–Ω–æ–≤–ª—è–µ–º URL —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
    const segments = pathname.split('/')
    if (segments[1] && ['en', 'ru'].includes(segments[1])) {
      // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —è–∑—ã–∫ –≤ URL, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
      segments[1] = newLang
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç —è–∑—ã–∫–∞ –≤ URL, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
      segments.splice(1, 0, newLang)
    }
    const newPath = segments.join('/')

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ cookie
    document.cookie = `locale=${newLang}; path=/; max-age=31536000`

    router.push(newPath)
    setIsOpen(false)
  }

  return (
    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          size="sm"
          className="flex items-center gap-2 h-8 px-2 text-sm">
          <Globe className="w-4 h-4" />
          <span className="hidden sm:inline">{currentLanguage.flag}</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-40">
        {languages.map((language) => (
          <DropdownMenuItem
            key={language.code}
            onClick={() => handleLanguageChange(language.code)}
            className={`flex items-center gap-2 cursor-pointer ${
              lang === language.code ? 'bg-accent' : ''
            }`}>
            <span>{language.flag}</span>
            <span>{language.name}</span>
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
